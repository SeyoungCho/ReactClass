[{"C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\index.js":"1","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\reportWebVitals.js":"2","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\App.js":"3","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\data.js":"4","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\Detail.js":"5"},{"size":618,"mtime":1631422631542,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1631422631543,"results":"8","hashOfConfig":"7"},{"size":4866,"mtime":1631422631535,"results":"9","hashOfConfig":"7"},{"size":1126,"mtime":1631422631541,"results":"10","hashOfConfig":"7"},{"size":4426,"mtime":1631422631536,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16xigzn",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\index.js",[],"C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\reportWebVitals.js",[],"C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\App.js",["25","26"],"import { Button,NavDropdown, Nav,Navbar,Container, Jumbotron } from 'react-bootstrap';\r\nimport logo from './logo.svg';\r\nimport React, {useState} from 'react';\r\nimport './App.css';\r\nimport Data from './data.js';\r\nimport Detail from './Detail.js';\r\nimport axios from 'axios';\r\n\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\n\r\n//내보내기 : export default 변수명\r\n//가져오기 : import 변수명 from 경로 \r\n\r\nfunction App() {\r\n\r\n  let [ shoes, shoes변경 ] = useState(Data);\r\n  let [ 재고, 재고변경 ] = useState([10,11,12]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">Shoe Shop</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            {/* <Nav.Link><Link to=\"/\">Home</Link></Nav.Link>\r\n            <Nav.Link><Link to=\"/detail\">Detail</Link></Nav.Link> */}\r\n            {/* as={}문법 : {}안에 있는 태그명 처럼 이 태그를 사용해주세요랑 비슷한 말 */}\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/detail/0\">Detail</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n      </Navbar>\r\n\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Jumbotron className=\"background\">\r\n          <h1>20% Season Off!</h1>\r\n          <p>\r\n            This is a simple hero unit, a simple jumbotron-style component for calling\r\n            extra attention to featured content or information.\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\">Learn more</Button>\r\n          </p>\r\n        </Jumbotron>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {\r\n              shoes.map(function(a, i){\r\n                return (\r\n                  <Card shoes={shoes[i]} i={i}></Card>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          <button className=\"btn btn-primary\" onClick={()=>{\r\n            //서버에게 get요청을 하는 코드\r\n            //더보기 버튼 누르면 axios.get(데이터요청할 URL) \r\n            //그러면 서버가 새로고침 없이 데이터 가져온다. \r\n            //성공하면 .then()\r\n            //실패하면 .catch()실행\r\n            //ajax로 가져온 자료 출력하는 법 \r\n            //.then((가져온자료)=>{가져온자료출력, 또는 어쩌구})\r\n            // post요청 할 경우 axios.post('서버URL', { id : 'codingapple', pw: 1234})\r\n            axios.get('https://codingapple1.github.io/shop/data2.json')\r\n            .then((result)=>{   \r\n              shoes변경([...shoes, ...result.data]);  //...은 대괄호를 벗겨주세요란 뜻\r\n              //즉 [...shose]는 shoes의 복사본인것\r\n              //그럼 ...result.data또한 벗겨저 다시 대괄호 넣은 것.\r\n              //즉 위에 []안에 있는 애들은 shoes와 result.data가 merge된 상태라고 보면 된다. \r\n            })\r\n            .catch(()=>{console.log('실패했어요')})\r\n          \r\n          }}>더보기</button>\r\n        </div>\r\n      </Route>\r\n\r\n      {/* Detail 컴포넌트 모듈화 */}\r\n      {/* path에 /:이 땡땡 표시는 뭘 적든간에 이곳으로 안내해라라는 것. \r\n      여기서 'id'는 URL 파라미터로, 변수명 처럼 자유롭게 암거나 적어도 된다. \r\n      예를 들어 /detail/:id:/id2 이런식도 가능하다.  */}\r\n      <Route path=\"/detail/:id\">\r\n        <Detail shoes={shoes} 재고={재고} 재고변경={재고변경}/>\r\n      </Route>\r\n      {/* <Route path=\"/어쩌구\" component={Modal}></Route> */}\r\n      {/* 위처럼 써도 됨. 한줄에 가능 */}\r\n\r\n      {/* /:id 라는 경로는 /뒤에 어떠한 문자열이 온다 라는 뜻. 즉 암거나 적으면 /:id인것. */}\r\n      <Route path=\"/:id\">\r\n        <div>아무거나 적었을 때 이거 보여주세요</div>\r\n      </Route>\r\n    </Switch>\r\n          \r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card(props){\r\n  return(\r\n    <div className=\"col-md 4\">\r\n      <img src={'https://codingapple1.github.io/shop/shoes' + (props.i+1) + '.jpg'} width=\"100%\"></img>\r\n      <h4>{ props.shoes.title }</h4>\r\n      <p>{ props.shoes.content } & {props.shoes.price}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\data.js",["27"],"export default [\r\n    {\r\n        id : 0,\r\n        title : \"White and Black\",\r\n        content : \"Born in France\",\r\n        price : 120000\r\n    },\r\n\r\n    {\r\n        id : 1,\r\n        title : \"Red Knit\",\r\n        content : \"Born in Seoul\",\r\n        price : 110000\r\n    },\r\n\r\n    {\r\n        id : 2,\r\n        title : \"Grey Yordan\",\r\n        content : \"Born in the States\",\r\n        price : 130000\r\n    }\r\n] \r\n// src 폴더에 App.js와 나란히 data.js를 만들었습니다.\r\n\r\n// 이 파일에서 중요한 변수를 export하고 싶을 땐 export default라는 문법을 쓰시고 우측에 배출을 원하는 변수를 담아줄 수 있습니다.\r\n\r\n// - 변수명, 함수명, 자료형 전부 배출가능합니다.\r\n\r\n// - 파일마다 export default 라는 키워드는 하나만 사용가능합니다.\r\n\r\n// 끝입니다.\r\n\r\n//변수 내보내기와 같은 기능이라고 보면 됨. \r\n\r\n//export default는 한 파일당 한번만 쓸 수 있음. \r\n//그럼 2개 이상 내보내고 싶으면? \r\n//export { 변수1, 변수2, ...}로 가능\r\n//마찬가지로 가져오기도 import { 변수1, 변수2, ... } from 경로","C:\\Users\\wnl38\\OneDrive\\Desktop\\ReactClass\\shop\\src\\Detail.js",["28","29","30","31","32"],"import axios from 'axios';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport './Detail.scss';\r\n\r\n//아래와 같이 CSS를 미리 입혀 놓은 컴포넌트를 만들 수 있음 (styled import후)\r\nlet 박스 = styled.div`\r\n    padding: 20px;\r\n    \r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n    font-size: 25px;\r\n    color: ${ props => props.색상 }\r\n`;\r\n\r\n// 컴포넌트의 Lifecycle\r\n// 컴포넌트는 등장, 업데이트(재렌더링), 퇴장(사라짐)의 라이프사이클을 가진다. \r\n// 여기서 Hook이라는 것으로 컴포넌트의 인생 중간중간에 뭔가 명령을 줄 수 있다. \r\n// ex.<Detail>등장 전에 이것좀 해주세요 등등\r\n\r\n// class Detail2 extends React.Component{\r\n\r\n//     componentDidMount(){\r\n//     //얘네가 옛날스타일 Hook이다. \r\n//     }\r\n//     componentWillUnmount(){\r\n\r\n//     }\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Detail(props){\r\n    \r\n    let [ alert, alert변경 ] = useState(true);\r\n    let [ inputData, inputData변경 ] = useState('');\r\n    // useEffect Hook : 컴포넌트가 마운트 되었을 때 \r\n    // 컴포넌트가 update될 때 \r\n    // 특정코드를 실행할 수 있음. \r\n    // 콤마 이후 대괄호 안에는 useEffect가 실행될 조건을 적을 수 있다. \r\n    // useEffect()여러개 적으면 적은 순서대로 실행된다. AJAX사용 시 활용함\r\n    useEffect(()=>{\r\n        //이렇게 치면 컴포넌트가 update될 때 아래 코드가 실행된다. \r\n        //2초후에 alert창을 안보이게 해보자. \r\n        let timer = setTimeout(()=>{\r\n            alert변경(false);\r\n        }, 2000);     \r\n        //return ()=>{실행할 코드} //detail이란 컴포넌트가 사라질 때 실행할 코드\r\n        //setTimeout쓸 때 주의점 : 타이머를 끝나고 제거해주지 않으면\r\n        // 버그가 발생 할 수도 있다. return으로 제거해주기\r\n        return ()=>{clearTimeout(timer)};\r\n      }, [alert]);\r\n    // 위 처럼 [alert]라고 넣어주면 alert라는 state가 변결될때만 실행해주세요 라는 말.\r\n    // 만약 []이라고 아무것도 안쓴다면, Detail컴포넌트가 최초로 등장할 때 \r\n    // 그때 한 번만 실행된다. \r\n    \r\n    let { id } = useParams();\r\n    let 찾은상품 = props.shoes.find((상품)=>{\r\n        return 상품.id == id;\r\n    })\r\n    let history = useHistory();\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n          <박스>\r\n            <제목 className=\"red\" 색상='green'>Detailed</제목>\r\n          </박스>\r\n          {inputData}\r\n          <input onChange={(e)=>{ inputData변경(e.target.value)}}/>\r\n          {/* e.target.value는 현재 입력되는 값을 의미한다. */}\r\n          {/* 여기서 문제 : inputData가 바뀔 때마다 HTML이 재렌더링된다. \r\n          이렇게 되면 위에 만든 UI인 alert도 계속 재렌더링되는 것이다. \r\n          useEffect()가 계속 재실행되는 버그가 발생하는 것 \r\n          그래서 useEffect에 파라미터로 마지막에 실행조건을 넣어주면 된다.*/}\r\n          {\r\n            alert === true \r\n            ?  (<div className=\"my-alert2\">\r\n                  <p>재고가 얼마 남지 않았습니다</p>\r\n              </div>)\r\n            : null\r\n          }\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <img src={'https://codingapple1.github.io/shop/shoes' + (찾은상품.id + 1) + '.jpg'} width=\"100%\" />\r\n            </div>\r\n            <div className=\"col-md-6 mt-4\">\r\n              <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n              <p>{찾은상품.content}</p>\r\n              <p>{찾은상품.price}</p>\r\n              <Info 재고={props.재고}></Info>\r\n              <button className=\"btn btn-danger\" onClick={()=>{\r\n                props.재고변경([9,10,11]);\r\n              }}>주문하기</button> \r\n              <button className=\"btn btn-danger\" onClick={\r\n                ()=>{ history.goBack();\r\n                    //history.push('/xxx')이라 하면 특정 경로로 이동시킬 수 있다.\r\n                }}>뒤로가기</button>\r\n            </div>\r\n          </div>\r\n        </div> \r\n\r\n        \r\n    )\r\n}\r\n\r\nfunction Info(props){\r\n  return(\r\n    <p>재고 : {props.재고[0]}</p>\r\n  )\r\n}\r\n\r\nexport default Detail;",{"ruleId":"33","severity":1,"message":"34","line":2,"column":8,"nodeType":"35","messageId":"36","endLine":2,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":114,"column":7,"nodeType":"39","endLine":114,"endColumn":98},{"ruleId":"40","severity":1,"message":"41","line":1,"column":1,"nodeType":"42","endLine":22,"endColumn":2},{"ruleId":"33","severity":1,"message":"43","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":66,"column":22,"nodeType":"46","messageId":"47","endLine":66,"endColumn":24},{"ruleId":"48","severity":1,"message":"49","line":72,"column":11,"nodeType":"39","messageId":"50","endLine":72,"endColumn":15},{"ruleId":"48","severity":1,"message":"51","line":73,"column":13,"nodeType":"39","messageId":"50","endLine":73,"endColumn":44},{"ruleId":"37","severity":1,"message":"38","line":92,"column":15,"nodeType":"39","endLine":92,"endColumn":110},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'axios' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component 박스 must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","Imported JSX component 제목 must be in PascalCase or SCREAMING_SNAKE_CASE"]