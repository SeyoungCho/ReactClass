{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wnl38\\\\OneDrive\\\\Desktop\\\\React Class\\\\blog\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //var a, b = [10, 100]; //ES6 destructuring 문법 \n  let [글제목, 글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '남자 여름 코디']);\n  let [따봉, 따봉변경] = useState(0); //state라는 변수 저장공간 만들기\n  //이렇게 State를 만들면 array가 생성된다.\n  //array안에는 [a,b]처럼 두가지 데이터가 들어있다.\n  //a에는 '남자 코트 추천'이 들어있고 \n  //b에는 a의 데이터를 수정하기 위한 함수가 들어있다. \n  //state는 변수 대신 쓰는 데이터 저장 공간 \n  //useState()를 사용해서 만들어야 함\n  //문자, 숫자, array, Object 다 저장 가능\n  //state를 굳이 쓰는 이유는? \n  //react를 Web-app 처럼 만들고 싶으면 전부 state로 만들어라\n  //데이터 변경시에 state로 만들어진 데이터라면 HTML이 저절로 재렌더링이 되므로\n  //state로 만든 변수들이 엄청 용이하다. \n  //state변수 변경하려면 쌩으로 하지말고 변경함수를 사용하여야 정상적인 재렌더링이 이루어진다.\n\n  let posts = '강남 고기 맛집';\n  let [modal, modal변경] = useState(false); //모달창을 켜고 닫는 스위치\n\n  let [누른제목, 누른제목변경] = useState(0);\n  let [입력값, 입력값변경] = useState('');\n\n  function 반복된UI() {\n    var array = [];\n\n    for (var i = 0; i < 3; i++) {\n      array.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC548\\uB155\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 18\n      }, this));\n    }\n\n    return array;\n  }\n\n  function 제목바꾸기() {\n    var newArray = [...글제목]; //deep copy 스킬, ...연산자 사용\n\n    newArray[0] = '여자 코트 추천';\n    글제목변경(newArray);\n  }\n\n  const sort = arr => {\n    var temp;\n    temp = arr[0];\n    arr[0] = arr[1];\n    arr[1] = temp;\n  };\n\n  function 순서정렬() {\n    var newArray = [...글제목];\n    sort(newArray);\n    글제목변경(newArray);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uAC1C\\uBC1C blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: 제목바꾸기,\n      children: \"\\uC774\\uB984\\uBC14\\uAFB8\\uAE30\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: 순서정렬,\n      children: \"\\uC815\\uB82C\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), 글제목.map((글, i) => {\n      //여기사 i 파라미터는 0,1,2...iterator\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          onClick: () => {\n            누른제목변경(i);\n          },\n          children: [글, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              따봉변경(따봉++);\n            },\n            children: [\"\\uD83D\\uDC4D \", 따봉]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 55\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"2\\uC6D4 18\\uC77C \\uBC1C\\uD589\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => {\n        console.log(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        modal변경(!modal);\n      },\n      children: \"\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), modal == true ? /*#__PURE__*/_jsxDEV(Modal, {\n      글제목: 글제목,\n      누른제목: 누른제목\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this) //부모컴포넌트는App, 자식컴포넌트가 Modal\n    : null, 반복된UI()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n} //Component 생성하기 \n//Component 생성 관습 : \n// 1.첫문자 대문자\n// 2.return 소괄호 안에 div는 큰거 하나만(그안에는 태그들 많아도 됨)! \n// 3.function App또한 하나의 Component이다.\n// 4.Component는 반복적으로 출현하는 UI들 위주로 만들어 준다. \n// 5.사이트 내에서 자주 바뀌는 UI들을 Component로 만들어 준다. \n// 단점 : State를 쓸 때 복잡해진다. (function App에서 변수를 만들기 때문에, 그 scope를 벗어난 Component에서 쓸려면 전달해줘야하므로 props라는 문법 이용해야함)\n\n\n_s(App, \"w9hBx+BzcKFn2VkCe8FeEZ5j4Mo=\");\n\n_c = App;\n\nfunction Modal(props) {\n  //return 안에 있는 HTML이 위 App 안에 Modal 태그 안에 다 들어간다. \n  //App에 있는 state변수들 여기서 쓰려면 props문을 써서 데이터를 전송해줘야함.\n  //props문 : <자식컴포넌트 작명={state명}/>\n  //props로 자식에게 전송 후 쓰면 됨. \n  //위에 Modal컴포넌트 정의함수에 파라미터로 넘긴 props에 부모 컴포넌트로부터 \n  //전송받은 모든 state들에 대한 정보가 있다. 하나의 Object라고 보면 된다. \n  // 참고1) props는 <Modal 이런거={이런거}  저런거={저런거}> 이렇게 10개 100개 1000개 무한히 전송이 가능합니다.\n  // 참고2) props라는 파라미터엔 전송한 모든 props 데이터가 들어가있습니다. props.글제목 이런 식으로 원하는 것만 꺼내쓰시면 됩니다.\n  // 참고3) props 전송할 땐 꼭 {} 중괄호로 전송해야하는건 아닙니다.\n  // <Modal 글제목={변수명}> 이렇게 변수명을 넣고싶으면 중괄호를 쓰시고\n  // <Modal 글제목=\"강남우동맛집\"> 이렇게 일반 텍스트를 전송하고 싶으면 따옴표 써도 됩니다.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.글제목[props.누른제목]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB0A0\\uC9DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC0C1\\uC138\\uB0B4\\uC6A9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Modal;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"sources":["C:/Users/wnl38/OneDrive/Desktop/React Class/blog/src/App.js"],"names":["React","useState","App","글제목","글제목변경","따봉","따봉변경","posts","modal","modal변경","누른제목","누른제목변경","입력값","입력값변경","반복된UI","array","i","push","제목바꾸기","newArray","sort","arr","temp","순서정렬","map","글","e","console","log","target","value","Modal","props"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  //var a, b = [10, 100]; //ES6 destructuring 문법 \n\n  let [글제목,글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집','남자 여름 코디']); \n  let [따봉, 따봉변경] = useState(0);\n  //state라는 변수 저장공간 만들기\n  //이렇게 State를 만들면 array가 생성된다.\n  //array안에는 [a,b]처럼 두가지 데이터가 들어있다.\n  //a에는 '남자 코트 추천'이 들어있고 \n  //b에는 a의 데이터를 수정하기 위한 함수가 들어있다. \n  //state는 변수 대신 쓰는 데이터 저장 공간 \n  //useState()를 사용해서 만들어야 함\n  //문자, 숫자, array, Object 다 저장 가능\n  //state를 굳이 쓰는 이유는? \n  //react를 Web-app 처럼 만들고 싶으면 전부 state로 만들어라\n  //데이터 변경시에 state로 만들어진 데이터라면 HTML이 저절로 재렌더링이 되므로\n  //state로 만든 변수들이 엄청 용이하다. \n  //state변수 변경하려면 쌩으로 하지말고 변경함수를 사용하여야 정상적인 재렌더링이 이루어진다.\n  let posts = '강남 고기 맛집';\n  let [modal, modal변경] = useState(false); //모달창을 켜고 닫는 스위치\n  let [누른제목, 누른제목변경] = useState(0);\n  let [입력값, 입력값변경] = useState('');\n  function 반복된UI(){\n    var array = [];\n    for(var i=0; i<3; i++){\n      array.push(<div>안녕</div>);\n    }\n    \n    return array;\n  }\n  function 제목바꾸기 (){\n    var newArray = [...글제목]; //deep copy 스킬, ...연산자 사용\n    newArray[0] = '여자 코트 추천';\n    글제목변경(newArray);\n  }\n  const sort = (arr)=>{\n    var temp; \n    temp = arr[0];\n    arr[0] = arr[1];\n    arr[1] = temp;\n  }\n  function 순서정렬(){\n    var newArray = [...글제목];\n    sort(newArray);\n    글제목변경(newArray);\n  }\n  \n   return(\n    <div className=\"App\">\n        <div className=\"black-nav\">\n          <div>개발 blog</div>\n        </div>\n        <button onClick={제목바꾸기}>이름바꾸기버튼</button>\n        <button onClick={순서정렬}>정렬버튼</button>\n        {\n\n          글제목.map((글,i)=>{  //여기사 i 파라미터는 0,1,2...iterator\n            return (\n              <div className=\"list\">\n              <h3 onClick={ ()=>{ 누른제목변경(i) } }>{ 글 } <span onClick={()=>{따봉변경(따봉++)}}>👍 {따봉}</span></h3>\n              <p>2월 18일 발행</p>\n              <hr/>\n              </div>\n            )\n          })\n        }\n        {/* onChange 이벤트 : 뭔가가 입력이 될 때 안의 함수가 실행됨 */}\n        <input onChange={ (e)=>{console.log(e.target.value); } }/>\n       \n        <button onClick={()=>{ modal변경(!modal)} }>버튼</button>\n        {\n          modal == true\n          ? <Modal 글제목={글제목} 누른제목={누른제목}></Modal> //부모컴포넌트는App, 자식컴포넌트가 Modal\n          : null\n        }\n        {반복된UI()}\n    </div>\n   );\n}\n\n//Component 생성하기 \n//Component 생성 관습 : \n// 1.첫문자 대문자\n// 2.return 소괄호 안에 div는 큰거 하나만(그안에는 태그들 많아도 됨)! \n// 3.function App또한 하나의 Component이다.\n// 4.Component는 반복적으로 출현하는 UI들 위주로 만들어 준다. \n// 5.사이트 내에서 자주 바뀌는 UI들을 Component로 만들어 준다. \n// 단점 : State를 쓸 때 복잡해진다. (function App에서 변수를 만들기 때문에, 그 scope를 벗어난 Component에서 쓸려면 전달해줘야하므로 props라는 문법 이용해야함)\nfunction Modal(props){\n  //return 안에 있는 HTML이 위 App 안에 Modal 태그 안에 다 들어간다. \n  //App에 있는 state변수들 여기서 쓰려면 props문을 써서 데이터를 전송해줘야함.\n  //props문 : <자식컴포넌트 작명={state명}/>\n  //props로 자식에게 전송 후 쓰면 됨. \n  //위에 Modal컴포넌트 정의함수에 파라미터로 넘긴 props에 부모 컴포넌트로부터 \n  //전송받은 모든 state들에 대한 정보가 있다. 하나의 Object라고 보면 된다. \n  // 참고1) props는 <Modal 이런거={이런거}  저런거={저런거}> 이렇게 10개 100개 1000개 무한히 전송이 가능합니다.\n  // 참고2) props라는 파라미터엔 전송한 모든 props 데이터가 들어가있습니다. props.글제목 이런 식으로 원하는 것만 꺼내쓰시면 됩니다.\n  // 참고3) props 전송할 땐 꼭 {} 중괄호로 전송해야하는건 아닙니다.\n  // <Modal 글제목={변수명}> 이렇게 변수명을 넣고싶으면 중괄호를 쓰시고\n  // <Modal 글제목=\"강남우동맛집\"> 이렇게 일반 텍스트를 전송하고 싶으면 따옴표 써도 됩니다.\n  return (\n    <div className=\"modal\">\n      <h2>{ props.글제목[props.누른제목] }</h2>\n      <p>날짜</p>\n      <p>상세내용</p>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}