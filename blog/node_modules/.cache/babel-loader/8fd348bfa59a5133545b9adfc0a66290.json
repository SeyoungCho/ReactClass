{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wnl38\\\\OneDrive\\\\Desktop\\\\React Class\\\\blog\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //var a, b = [10, 100]; //ES6 destructuring 문법 \n  let [글제목, 글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '남자 여름 코디']);\n  let [따봉, 따봉변경] = useState(0); //state라는 변수 저장공간 만들기\n  //이렇게 State를 만들면 array가 생성된다.\n  //array안에는 [a,b]처럼 두가지 데이터가 들어있다.\n  //a에는 '남자 코트 추천'이 들어있고 \n  //b에는 a의 데이터를 수정하기 위한 함수가 들어있다. \n  //state는 변수 대신 쓰는 데이터 저장 공간 \n  //useState()를 사용해서 만들어야 함\n  //문자, 숫자, array, Object 다 저장 가능\n  //state를 굳이 쓰는 이유는? \n  //react를 Web-app 처럼 만들고 싶으면 전부 state로 만들어라\n  //데이터 변경시에 state로 만들어진 데이터라면 HTML이 저절로 재렌더링이 되므로\n  //state로 만든 변수들이 엄청 용이하다. \n  //state변수 변경하려면 쌩으로 하지말고 변경함수를 사용하여야 정상적인 재렌더링이 이루어진다.\n\n  let posts = '강남 고기 맛집';\n  let [modal, modal변경] = useState(false); //모달창을 켜고 닫는 스위치\n\n  function 제목바꾸기() {\n    var newArray = [...글제목]; //deep copy 스킬, ...연산자 사용\n\n    newArray[0] = '여자 코트 추천';\n    글제목변경(newArray);\n  }\n\n  const sort = arr => {\n    var temp;\n    temp = arr[0];\n    arr[0] = arr[1];\n    arr[1] = temp;\n  };\n\n  function 순서정렬() {\n    var newArray = [...글제목];\n    sort(newArray);\n    글제목변경(newArray);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uAC1C\\uBC1C blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: 제목바꾸기,\n      children: \"\\uC774\\uB984\\uBC14\\uAFB8\\uAE30\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: 순서정렬,\n      children: \"\\uC815\\uB82C\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), 글제목.map(글 => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: 글\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => {\n            따봉변경(따봉++);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"2\\uC6D4 18\\uC77C \\uBC1C\\uD589\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        modal변경(!modal);\n      },\n      children: \"\\uBC84\\uD2BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), modal == true ? /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n} //Component 생성하기 \n//Component 생성 관습 : \n// 1.첫문자 대문자\n// 2.return 소괄호 안에 div는 큰거 하나만(그안에는 태그들 많아도 됨)! \n// 3.function App또한 하나의 Component이다.\n// 4.Component는 반복적으로 출현하는 UI들 위주로 만들어 준다. \n// 5.사이트 내에서 자주 바뀌는 UI들을 Component로 만들어 준다. \n// 단점 : State를 쓸 때 복잡해진다. (function App에서 변수를 만들기 때문에, 그 scope를 벗어난 Component에서 쓸려면 전달해줘야하므로 props라는 문법 이용해야함)\n\n\n_s(App, \"bY/7rQuqtWdl/TyeqP/lxf2iA9o=\");\n\n_c = App;\n\nfunction Modal() {\n  //return 안에 있는 HTML이 위 App 안에 Modal 태그 안에 다 들어간다. \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC81C\\uBAA9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB0A0\\uC9DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC0C1\\uC138\\uB0B4\\uC6A9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Modal;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"sources":["C:/Users/wnl38/OneDrive/Desktop/React Class/blog/src/App.js"],"names":["React","useState","App","글제목","글제목변경","따봉","따봉변경","posts","modal","modal변경","제목바꾸기","newArray","sort","arr","temp","순서정렬","map","글","Modal"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  //var a, b = [10, 100]; //ES6 destructuring 문법 \n\n  let [글제목,글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집','남자 여름 코디']); \n  let [따봉, 따봉변경] = useState(0);\n  //state라는 변수 저장공간 만들기\n  //이렇게 State를 만들면 array가 생성된다.\n  //array안에는 [a,b]처럼 두가지 데이터가 들어있다.\n  //a에는 '남자 코트 추천'이 들어있고 \n  //b에는 a의 데이터를 수정하기 위한 함수가 들어있다. \n  //state는 변수 대신 쓰는 데이터 저장 공간 \n  //useState()를 사용해서 만들어야 함\n  //문자, 숫자, array, Object 다 저장 가능\n  //state를 굳이 쓰는 이유는? \n  //react를 Web-app 처럼 만들고 싶으면 전부 state로 만들어라\n  //데이터 변경시에 state로 만들어진 데이터라면 HTML이 저절로 재렌더링이 되므로\n  //state로 만든 변수들이 엄청 용이하다. \n  //state변수 변경하려면 쌩으로 하지말고 변경함수를 사용하여야 정상적인 재렌더링이 이루어진다.\n  let posts = '강남 고기 맛집';\n  let [modal, modal변경] = useState(false); //모달창을 켜고 닫는 스위치\n\n  function 제목바꾸기 (){\n    var newArray = [...글제목]; //deep copy 스킬, ...연산자 사용\n    newArray[0] = '여자 코트 추천';\n    글제목변경(newArray);\n  }\n  const sort = (arr)=>{\n    var temp; \n    temp = arr[0];\n    arr[0] = arr[1];\n    arr[1] = temp;\n  }\n  function 순서정렬(){\n    var newArray = [...글제목];\n    sort(newArray);\n    글제목변경(newArray);\n  }\n  \n   return(\n    <div className=\"App\">\n        <div className=\"black-nav\">\n          <div>개발 blog</div>\n        </div>\n        <button onClick={제목바꾸기}>이름바꾸기버튼</button>\n        <button onClick={순서정렬}>정렬버튼</button>\n        {\n\n          글제목.map((글)=>{\n            return (\n              <div className=\"list\">\n              <h3>{ 글 }</h3><span onClick={()=>{따봉변경(따봉++)}}></span>\n              <p>2월 18일 발행</p>\n              <hr/>\n              </div>\n            )\n          })\n        }\n        <button onClick={()=>{modal변경(!modal)}}>버튼</button>\n        {\n          modal == true\n          ? <Modal></Modal>\n          : null\n        }\n\n    </div>\n   );\n}\n\n//Component 생성하기 \n//Component 생성 관습 : \n// 1.첫문자 대문자\n// 2.return 소괄호 안에 div는 큰거 하나만(그안에는 태그들 많아도 됨)! \n// 3.function App또한 하나의 Component이다.\n// 4.Component는 반복적으로 출현하는 UI들 위주로 만들어 준다. \n// 5.사이트 내에서 자주 바뀌는 UI들을 Component로 만들어 준다. \n// 단점 : State를 쓸 때 복잡해진다. (function App에서 변수를 만들기 때문에, 그 scope를 벗어난 Component에서 쓸려면 전달해줘야하므로 props라는 문법 이용해야함)\nfunction Modal(){\n  //return 안에 있는 HTML이 위 App 안에 Modal 태그 안에 다 들어간다. \n  return (\n    <div className=\"modal\">\n      <h2>제목</h2>\n      <p>날짜</p>\n      <p>상세내용</p>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}